Group #9 Assignment #3
	Jon Boone
	Joshua Datko
	Paul DeMicco
	Joseph Heenan
________________

This package contains all of the files for Assignment #3.

=======
interpreterext.py		** Contains the grammar for the original mini language. Also contains the main method which
                        ** takes in a file and checks for the correct tokens and syntax.

                        ** p_program will call all of the methods required to translate, optimize and link the RAL
                        ** code to be used in the RAM simulator.

                        ** Three text files will be generated as output.
                        ** 1.) symOut.txt - Contains the RAL code prior to optimization and linking.
                        ** 2.) optimizedOut.txt - Contains the RAL code after optimization is performed.
                        ** 3.) linkedOut.txt - Contains the RAL code after the linker has been executed.
                        ** 4.) memOut.txt - Breaks down the VARS, CONSTS and TEMP variables stored in memory and
                        **     and displays their name, and memory address.

programext.py			** Contains the implementation for the grammar along with all of the implementation for
                        ** generating the RAL code to be used in the RAM simulator.

makefile			    ** Contains the following targets as defined in the requirements.
                        ** view - displays all source code other than the RAM simulator code.
                        ** compile - runs the interpreter which generates the RAL code files.
                        ** view-trans - displays the symbolic RAL program.
                        ** view-link - displays the compiled, but not optimized RAL code.
                        ** view-op - displayed the optimized RAL code.
                        ** run - runs the RAM simulator with the non-optimized linked RAL code output.
                        ** run-op - runs the RAM simulator with the optimized linked RAL code output.
                        ** clean - cleans all intermediate and binary files.

    *** Application Notes ***

    All Expressions (Number,Ident,Times,Plus,Minus) and statements (AssignStmt,IfStmt,WhileStmt)
    have been modified to include a translate method which will return a tuple including RAL instructions,
    and the final storage location for the method.

    RAL instructions are stored as a MachineCode type which includes opcode, operand and label properties.

    Symbol table access for VARs and CONSTs are done via a SymbolTableUtils helper class. Temp variables are
    created using the TempVariableFactory helper class and Labels (used in WhileStmt and IfStmt) are created
    using the LabelFactory helper class. The helper method 'createOrGetSymbolTableReference' in
    SymbolTableUtils will automatically create an entry in the Global Symbol table if one
    does not exist, or it will simply return the one that does exist. The Global symbol table is a list of
    SymbolTableEntry objects which include properties for value, type, and address (to be filled in by the linker).

    After all statements and expressions have been translated you will end up with a list of RAL instructions that
    are not linked to addresses, and not optimized.  Optimization will occur after this step.  Optimization currently
    performs a 'Peephole' Optimization scheme in which it looks for redundant LD commands. This is done by detecting
    if the current operand and the previous operand are the same, and if the previous operand is a ST (Store) and the
    current is a LD (Load).  There is no need to Load the operand if it was just Stored because it is already located
    in the AC (Accumulator).

    Once the RAL code is optimized we must now link it to actual addresses.  This is done via the Linker which loops
    through all statements and finds the operand's address that was created in the symbol table. Linked RAL code can
    now be ran on the RAM simulator.

TEST FILES - Will be explained in detail below:
________________
assign1.p       ** Used to test the assignment of constants to variables.
assign2.p       ** Used to test the assignment of constants to variables, and variables to variables.

identTest1.p    ** Used to test the Identity statement.

iftest1.p       ** Used to test the If statement method.

math.p          ** Generic math testing input file.

Plus1.p         ** Used to test the Multiple method using 3 values.
Plus2.p         ** Used to test the Multiple method using 2 values.

Sub1.p          ** Used to test the Subtraction method using 3 values.
Sub2.p          ** Used to test the Subtraction method using 2 values.

Times1.p        ** Used to test the Multiply method using 3 factors.
Times2.p        ** Used to test the Multiply method using 2 factors.

whileTest1.p    ** Used to test the While Statement


README				** This file. Contains details out how to run files, build, test, etc.

DESCRIPTION: Assignment #3, Part #1
___________

This project implements a compiler who's target language is the RAL instruction set run on the RAM
simulator. This is accomplished by modifying the  mini language interpreter generate RAL instructions,
optimize the instructions, and then link the instructions to memory addresses.

RUNNING: Assignment #3, Part #1
___________

Can be run via make run-part1 < myinputfile (where you substitute myinputfile for an appropriate mini language input file)

TESTING: Assignment #3, Part #1
___________
All test case files (*.p) have been run through the compiler to ensure proper operation. The output of the compiler has
also been ran through the RAM simulator to validate the instructions have been generated properly.